plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "xyz.teamgravity.gradleautomation"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions "tupac"
    productFlavors {
        biggie {
            dimension "tupac"
            applicationIdSuffix ".notorious"
        }
        nas {
            dimension "tupac"
            applicationIdSuffix ".nasty"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        alpha {
            minifyEnabled true
            debuggable false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

task helloWorld() {
    println "Hello World!"

    doLast {
        println "This must be executed last you know what I mean"
    }

    10.times { index ->
        println "Registering task: $index"
        tasks.register("task$index") {
            doLast {
                println "Hello from task: $index"
            }
        }
    }

    tasks.named("task1") {
        dependsOn "task4", "task6", "task8"
    }

    dependsOn "task1"

    doFirst {
        println "It doesn't matter the order, I'm gonna executed before doLast"
    }
}

task copyApk(type: Copy, dependsOn: "test") {
    def sourceDir = layout.buildDirectory.dir("intermediates/apk/debug/app-debug.apk")
    def destinationDir = "$rootDir/apk"
    from sourceDir
    into destinationDir
    rename "app-debug.apk", "gradle-automation.apk"
    doLast {
        def file = new File(destinationDir, "gradle-automation.apk")
        ant.checksum file: file.path
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == "assembleDebug") {
        task.finalizedBy "copyApk"
    }
}